name: Import SSC SAST Results
on:
  workflow_call:
    secrets:
      SSC_CI_TOKEN:
        description: 'CIToken for service account'
        required: true
    inputs:
      APPLICATION:
        description: 'Application Name'
        type: string
        required: true
      VERSION:
        description: 'Application Version'
        type: string
        required: true
      SSC_URL:
        description: "SSC Base URL"
        type: string
        required: false
        default: "https://fortify.platform.sphdigital.com.sg/"
jobs:
  setup-correct-runner:
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.check_branch.outputs.runner }}
    steps:
      - name: Check branch
        id: check_branch
        run: |
          if [ ${{ github.repository_owner }} == 'SPHTech' ]; then
            echo "runner=sphtech-sec" >> "$GITHUB_OUTPUT"
          else
            echo "runner=sphtech-platform-sec" >> "$GITHUB_OUTPUT"
          fi
  Import-SSC-SAST:
    needs: setup-correct-runner
    runs-on:
    - self-hosted
    - ${{ needs.setup-correct-runner.outputs.runner }}
    steps:
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 11
      # Pull SAST issues from Fortify on Demand and generate GitHub-optimized SARIF output
      - name: Export Results
        uses: fortify/gha-export-vulnerabilities@v1
        with:
          ssc_base_url: ${{ inputs.SSC_URL }}
          ssc_auth_token: ${{ secrets.SSC_CI_TOKEN }}
          ssc_version_name: ${{ inputs.APPLICATION }}:${{ inputs.VERSION }}

      # Import Fortify SAST results to GitHub Security Code Scanning
      - name: Import Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./gh-fortify-sast.sarif
